"use strict";

/*jslint node:true, vars:true, bitwise:true, unparam:true */
/*jshint unused:true */

var sensorModule = require('jsupm_ttp223');
var buzzerModule = require("jsupm_buzzer");
var lcdModule = require("jsupm_i2clcd");
var groveSensor = require("jsupm_grove");
var socket = require('./socket');

var SENSORS = require('./sensors');
var STATE = {
  listening: 0,
  push: 1,
  pull: 2,
  connected: 3
};

var connectionExpiryTimeout = 3000;
var pullExpiredTimeout = 5000;

// global state
var state;
var connectionTimeout;
var pullTimeout;

var touch = new sensorModule.TTP223(SENSORS.touch);
var buzzer = new buzzerModule.Buzzer(SENSORS.buzzer);
var lcd = new lcdModule.Jhd1313m1(SENSORS.lcd);
var redLed = new groveSensor.GroveLed(SENSORS.leds.red);
var greenLed = new groveSensor.GroveLed(SENSORS.leds.green);

function initialize() {
  socket.init();
  state = STATE.listening;
  setInterval(readSensorValue, 100);

  socket.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (msg.event === 'push') {
      handlePushMessage();
    } else if (msg.event === 'expired') {
      handleExpiredMessage();
    } else if (msg.event === 'missed') {
      handleMissedMessage();
    }
  });

  buzzer.playSound(buzzerModule.DO, 5000);
  buzzer.stopSound();
}

function handlePushMessage() {
  switch (state) {
    case STATE.listening:
    case STATE.pull:
      state = STATE.pull;
      pull();
      break;
    case STATE.push:
      state = STATE.connected;
      connect();
      break;
    case STATE.connected:
      // Nothi ng happens: we're connected
      break;
  }
}

function handleExpiredMessage() {
  switch (state) {
    case STATE.connected:
      connectionExpired();
      break;
  }
}

function handleMissedMessage() {
  switch (state) {
    case STATE.push:
      state = STATE.listening;
      updateState();
      break;
  }
}

function readSensorValue() {
  if (touch.isPressed()) {
    console.log(touch.name() + " is pressed");
    switch (state) {
      case STATE.listening:
      case STATE.push:
        state = STATE.push;
        push();
        break;
      case STATE.pull:
        state = STATE.connected;
        connect();
        break;
      case STATE.connected:
        resetExpiryTimeout();
        break;
    }
  } else {
    if (state === STATE.push) {
      state = STATE.listening;
      updateState();
    }
  }
}

function push() {
  console.log('pushing', state);
  socket.send({ event: 'push' });
  updateState();
  // TODO wait listen for 5 seconds and then go back to listening
}

function pull() {
  console.log('pulling', state);

  updateState();
  buzzer.playSound(buzzerModule.DO, 5000);
  setTimeout(function () {
    return buzzer.stopSound();
  }, 500);

  if (pullTimeout) {
    clearTimeout(pullTimeout);
  }

  pullTimeout = setTimeout(pullExpired, pullExpiredTimeout);
}

function connect() {
  console.log('connected!', state);
  socket.send({ event: 'push' });

  updateState();

  if (pullTimeout) {
    clearTimeout(pullTimeout);
  }

  connectionTimeout = setTimeout(connectionExpired, connectionExpiryTimeout);
}

function pullExpired() {
  console.log('pull expired');

  state = STATE.listening;
  updateState();

  socket.send({ event: 'missed' });
}

function connectionExpired() {
  console.log('Connection expired!');
  state = STATE.listening;
  updateState();

  clearTimeout(connectionTimeout);
  socket.send({ event: 'expired' });
}

function resetExpiryTimeout() {
  clearTimeout(connectionTimeout);
  connectionTimeout = setTimeout(connectionExpired, connectionExpiryTimeout);
}

function updateState() {
  switch (state) {
    case STATE.listening:
      redLed.off();
      greenLed.off();
      lcd.setColor(0, 0, 0);
      lcd.clear();
      break;
    case STATE.pull:
      redLed.on();
      greenLed.off();
      lcd.setColor(255, 0, 0);
      lcd.clear();
      lcd.write("Please, don't\nlet me hang!");
      break;
    case STATE.push:
      redLed.off();
      greenLed.off();
      lcd.setColor(0, 0, 255);
      lcd.clear();
      lcd.write("Anyone there?");
      break;
    case STATE.connected:
      redLed.off();
      greenLed.on();
      lcd.setColor(0, 255, 0);
      lcd.clear();
      lcd.write("Hello, World!");
      break;
  }
}

initialize();

// Print message when exiting
process.on('SIGINT', function () {
  console.log("Exiting...");
  process.exit(0);
});
//# sourceMappingURL=data:application/json;base64,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LHNCQUFvQixXQUFXLGlCQUFYLEVBQThCLHVCQUE5QixDQUFwQjtBQUNEOztBQUVELFNBQVMsV0FBVCxHQUFzQjtBQUNwQixVQUFPLEtBQVA7QUFDRSxTQUFLLE1BQU0sU0FBWDtBQUNFLGFBQU8sR0FBUDtBQUNBLGVBQVMsR0FBVDtBQUNBLFVBQUksUUFBSixDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkI7QUFDQSxVQUFJLEtBQUo7QUFDQTtBQUNGLFNBQUssTUFBTSxJQUFYO0FBQ0UsYUFBTyxFQUFQO0FBQ0EsZUFBUyxHQUFUO0FBQ0EsVUFBSSxRQUFKLENBQWEsR0FBYixFQUFrQixDQUFsQixFQUFxQixDQUFyQjtBQUNBLFVBQUksS0FBSjtBQUNBLFVBQUksS0FBSixDQUFVLDZCQUFWO0FBQ0E7QUFDRixTQUFLLE1BQU0sSUFBWDtBQUNFLGFBQU8sR0FBUDtBQUNBLGVBQVMsR0FBVDtBQUNBLFVBQUksUUFBSixDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsR0FBbkI7QUFDQSxVQUFJLEtBQUo7QUFDQSxVQUFJLEtBQUosQ0FBVSxlQUFWO0FBQ0E7QUFDRixTQUFLLE1BQU0sU0FBWDtBQUNFLGFBQU8sR0FBUDtBQUNBLGVBQVMsRUFBVDtBQUNBLFVBQUksUUFBSixDQUFhLENBQWIsRUFBZ0IsR0FBaEIsRUFBcUIsQ0FBckI7QUFDQSxVQUFJLEtBQUo7QUFDQSxVQUFJLEtBQUosQ0FBVSxlQUFWO0FBQ0E7QUEzQko7QUE2QkQ7O0FBRUQ7OztBQUdBLFFBQVEsRUFBUixDQUFXLFFBQVgsRUFBcUIsWUFDckI7QUFDQyxVQUFRLEdBQVIsQ0FBWSxZQUFaO0FBQ0EsVUFBUSxJQUFSLENBQWEsQ0FBYjtBQUNBLENBSkQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qanNsaW50IG5vZGU6dHJ1ZSwgdmFyczp0cnVlLCBiaXR3aXNlOnRydWUsIHVucGFyYW06dHJ1ZSAqL1xuLypqc2hpbnQgdW51c2VkOnRydWUgKi9cblxudmFyIHNlbnNvck1vZHVsZSA9IHJlcXVpcmUoJ2pzdXBtX3R0cDIyMycpO1xudmFyIGJ1enplck1vZHVsZSA9IHJlcXVpcmUoXCJqc3VwbV9idXp6ZXJcIik7XG52YXIgbGNkTW9kdWxlID0gcmVxdWlyZShcImpzdXBtX2kyY2xjZFwiKTtcbnZhciBncm92ZVNlbnNvciA9IHJlcXVpcmUoXCJqc3VwbV9ncm92ZVwiKTtcbnZhciBzb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuXG5jb25zdCBTRU5TT1JTID0gcmVxdWlyZSgnLi9zZW5zb3JzJyk7XG5jb25zdCBTVEFURSA9IHtcbiAgbGlzdGVuaW5nOiAwLFxuICBwdXNoOiAxLFxuICBwdWxsOiAyLFxuICBjb25uZWN0ZWQ6IDNcbn07XG5cbnZhciBjb25uZWN0aW9uRXhwaXJ5VGltZW91dCA9IDMwMDA7XG52YXIgcHVsbEV4cGlyZWRUaW1lb3V0ID0gNTAwMDtcblxuLy8gZ2xvYmFsIHN0YXRlXG52YXIgc3RhdGU7XG52YXIgY29ubmVjdGlvblRpbWVvdXQ7XG52YXIgcHVsbFRpbWVvdXQ7XG5cbnZhciB0b3VjaCA9IG5ldyBzZW5zb3JNb2R1bGUuVFRQMjIzKFNFTlNPUlMudG91Y2gpO1xudmFyIGJ1enplciA9IG5ldyBidXp6ZXJNb2R1bGUuQnV6emVyKFNFTlNPUlMuYnV6emVyKTtcbnZhciBsY2QgPSBuZXcgbGNkTW9kdWxlLkpoZDEzMTNtMShTRU5TT1JTLmxjZCk7XG52YXIgcmVkTGVkID0gbmV3IGdyb3ZlU2Vuc29yLkdyb3ZlTGVkKFNFTlNPUlMubGVkcy5yZWQpO1xudmFyIGdyZWVuTGVkID0gbmV3IGdyb3ZlU2Vuc29yLkdyb3ZlTGVkKFNFTlNPUlMubGVkcy5ncmVlbik7XG5cbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gIHNvY2tldC5pbml0KCk7XG4gIHN0YXRlID0gU1RBVEUubGlzdGVuaW5nO1xuICBzZXRJbnRlcnZhbChyZWFkU2Vuc29yVmFsdWUsIDEwMCk7XG5cbiAgc29ja2V0Lm9uTWVzc2FnZSgoZGF0YSkgPT4ge1xuICAgICB2YXIgbXNnID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgICBpZihtc2cuZXZlbnQgPT09ICdwdXNoJyl7XG4gICAgICAgIGhhbmRsZVB1c2hNZXNzYWdlKClcbiAgICAgfSBlbHNlIGlmKG1zZy5ldmVudCA9PT0gJ2V4cGlyZWQnKXtcbiAgICAgICAgaGFuZGxlRXhwaXJlZE1lc3NhZ2UoKTtcbiAgICAgfSBlbHNlIGlmKG1zZy5ldmVudCA9PT0gJ21pc3NlZCcpe1xuICAgICAgICBoYW5kbGVNaXNzZWRNZXNzYWdlKCk7XG4gICAgIH1cbiAgfSk7XG5cbiAgYnV6emVyLnBsYXlTb3VuZChidXp6ZXJNb2R1bGUuRE8sIDUwMDApO1xuICBidXp6ZXIuc3RvcFNvdW5kKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVB1c2hNZXNzYWdlKCl7XG4gIHN3aXRjaCAoc3RhdGUpIHtcbiAgIGNhc2UgU1RBVEUubGlzdGVuaW5nOlxuICAgY2FzZSBTVEFURS5wdWxsOlxuICAgICBzdGF0ZSA9IFNUQVRFLnB1bGw7XG4gICAgIHB1bGwoKTtcbiAgICAgYnJlYWs7XG4gICBjYXNlIFNUQVRFLnB1c2g6XG4gICAgIHN0YXRlID0gU1RBVEUuY29ubmVjdGVkO1xuICAgICBjb25uZWN0KCk7XG4gICAgIGJyZWFrO1xuICAgY2FzZSBTVEFURS5jb25uZWN0ZWQ6XG4gICAgIC8vIE5vdGhpIG5nIGhhcHBlbnM6IHdlJ3JlIGNvbm5lY3RlZFxuICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFeHBpcmVkTWVzc2FnZSgpe1xuICBzd2l0Y2goc3RhdGUpe1xuICAgIGNhc2UgU1RBVEUuY29ubmVjdGVkOlxuICAgICAgY29ubmVjdGlvbkV4cGlyZWQoKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1pc3NlZE1lc3NhZ2UoKXtcbiAgc3dpdGNoKHN0YXRlKXtcbiAgICBjYXNlIFNUQVRFLnB1c2g6XG4gICAgICBzdGF0ZSA9IFNUQVRFLmxpc3RlbmluZztcbiAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkU2Vuc29yVmFsdWUoKSB7XG4gIGlmICggdG91Y2guaXNQcmVzc2VkKCkgKSB7XG4gICAgY29uc29sZS5sb2codG91Y2gubmFtZSgpICsgXCIgaXMgcHJlc3NlZFwiKTtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIFNUQVRFLmxpc3RlbmluZzpcbiAgICAgIGNhc2UgU1RBVEUucHVzaDpcbiAgICAgICAgc3RhdGUgPSBTVEFURS5wdXNoO1xuICAgICAgICBwdXNoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTVEFURS5wdWxsOlxuICAgICAgICBzdGF0ZSA9IFNUQVRFLmNvbm5lY3RlZFxuICAgICAgICBjb25uZWN0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTVEFURS5jb25uZWN0ZWQ6XG4gICAgICAgIHJlc2V0RXhwaXJ5VGltZW91dCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN0YXRlID09PSBTVEFURS5wdXNoKSB7XG4gICAgICBzdGF0ZSA9IFNUQVRFLmxpc3RlbmluZztcbiAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgfVxuXG4gIH1cbn1cblxuZnVuY3Rpb24gcHVzaCgpIHtcbiAgY29uc29sZS5sb2coJ3B1c2hpbmcnLCBzdGF0ZSk7XG4gIHNvY2tldC5zZW5kKHtldmVudDogJ3B1c2gnfSk7XG4gIHVwZGF0ZVN0YXRlKCk7XG4gIC8vIFRPRE8gd2FpdCBsaXN0ZW4gZm9yIDUgc2Vjb25kcyBhbmQgdGhlbiBnbyBiYWNrIHRvIGxpc3RlbmluZ1xufVxuXG5mdW5jdGlvbiBwdWxsKCkge1xuICBjb25zb2xlLmxvZygncHVsbGluZycsIHN0YXRlKTtcblxuICB1cGRhdGVTdGF0ZSgpO1xuICBidXp6ZXIucGxheVNvdW5kKGJ1enplck1vZHVsZS5ETywgNTAwMClcbiAgc2V0VGltZW91dCgoKSA9PiBidXp6ZXIuc3RvcFNvdW5kKCksIDUwMCk7XG5cbiAgaWYocHVsbFRpbWVvdXQpe1xuICAgIGNsZWFyVGltZW91dChwdWxsVGltZW91dClcbiAgfVxuXG4gIHB1bGxUaW1lb3V0ID0gc2V0VGltZW91dChwdWxsRXhwaXJlZCwgcHVsbEV4cGlyZWRUaW1lb3V0KTtcbn1cblxuZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCEnLCBzdGF0ZSk7XG4gIHNvY2tldC5zZW5kKHtldmVudDogJ3B1c2gnfSk7XG5cbiAgdXBkYXRlU3RhdGUoKTtcblxuICBpZihwdWxsVGltZW91dCl7XG4gICAgY2xlYXJUaW1lb3V0KHB1bGxUaW1lb3V0KVxuICB9XG5cbiAgY29ubmVjdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KGNvbm5lY3Rpb25FeHBpcmVkLCBjb25uZWN0aW9uRXhwaXJ5VGltZW91dCk7XG59XG5cbmZ1bmN0aW9uIHB1bGxFeHBpcmVkKCl7XG4gIGNvbnNvbGUubG9nKCdwdWxsIGV4cGlyZWQnKTtcblxuICBzdGF0ZSA9IFNUQVRFLmxpc3RlbmluZztcbiAgdXBkYXRlU3RhdGUoKTtcblxuICBzb2NrZXQuc2VuZCh7ZXZlbnQ6ICdtaXNzZWQnfSk7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3Rpb25FeHBpcmVkKCl7XG4gIGNvbnNvbGUubG9nKCdDb25uZWN0aW9uIGV4cGlyZWQhJyk7XG4gIHN0YXRlID0gU1RBVEUubGlzdGVuaW5nO1xuICB1cGRhdGVTdGF0ZSgpO1xuXG4gIGNsZWFyVGltZW91dChjb25uZWN0aW9uVGltZW91dCk7XG4gIHNvY2tldC5zZW5kKHtldmVudDogJ2V4cGlyZWQnfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0RXhwaXJ5VGltZW91dCgpe1xuICBjbGVhclRpbWVvdXQoY29ubmVjdGlvblRpbWVvdXQpO1xuICBjb25uZWN0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoY29ubmVjdGlvbkV4cGlyZWQsIGNvbm5lY3Rpb25FeHBpcnlUaW1lb3V0KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU3RhdGUoKXtcbiAgc3dpdGNoKHN0YXRlKXtcbiAgICBjYXNlIFNUQVRFLmxpc3RlbmluZzpcbiAgICAgIHJlZExlZC5vZmYoKTtcbiAgICAgIGdyZWVuTGVkLm9mZigpO1xuICAgICAgbGNkLnNldENvbG9yKDAsIDAsIDApO1xuICAgICAgbGNkLmNsZWFyKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNUQVRFLnB1bGw6XG4gICAgICByZWRMZWQub24oKTtcbiAgICAgIGdyZWVuTGVkLm9mZigpO1xuICAgICAgbGNkLnNldENvbG9yKDI1NSwgMCwgMCk7XG4gICAgICBsY2QuY2xlYXIoKTtcbiAgICAgIGxjZC53cml0ZShcIlBsZWFzZSwgZG9uJ3RcXG5sZXQgbWUgaGFuZyFcIik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNUQVRFLnB1c2g6XG4gICAgICByZWRMZWQub2ZmKCk7XG4gICAgICBncmVlbkxlZC5vZmYoKTtcbiAgICAgIGxjZC5zZXRDb2xvcigwLCAwLCAyNTUpO1xuICAgICAgbGNkLmNsZWFyKCk7XG4gICAgICBsY2Qud3JpdGUoXCJBbnlvbmUgdGhlcmU/XCIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTVEFURS5jb25uZWN0ZWQ6XG4gICAgICByZWRMZWQub2ZmKCk7XG4gICAgICBncmVlbkxlZC5vbigpO1xuICAgICAgbGNkLnNldENvbG9yKDAsIDI1NSwgMCk7XG4gICAgICBsY2QuY2xlYXIoKTtcbiAgICAgIGxjZC53cml0ZShcIkhlbGxvLCBXb3JsZCFcIik7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5pbml0aWFsaXplKCk7XG5cbi8vIFByaW50IG1lc3NhZ2Ugd2hlbiBleGl0aW5nXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCBmdW5jdGlvbigpXG57XG5cdGNvbnNvbGUubG9nKFwiRXhpdGluZy4uLlwiKTtcblx0cHJvY2Vzcy5leGl0KDApO1xufSk7XG4iXX0=