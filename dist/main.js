"use strict";

/*jslint node:true, vars:true, bitwise:true, unparam:true */
/*jshint unused:true */
/*global */
/*
 * Author: Zion Orent <zorent@ics.com>
 * Copyright (c) 2014 Intel Corporation.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var sensorModule = require('jsupm_ttp223');
var buzzerModule = require("jsupm_buzzer");
var groveSensor = require("jsupm_grove");
var socket = require('./socket');

var SENSORS = require('./sensors');
var STATE = {
  listening: 0,
  push: 1,
  pull: 2,
  connected: 3
};
// global state
var state;

var touch = new sensorModule.TTP223(SENSORS.touch);
var buzzer = new buzzerModule.Buzzer(SENSORS.buzzer);
var redLed = new groveSensor.GroveLed(SENSORS.leds.red);
var greenLed = new groveSensor.GroveLed(SENSORS.leds.green);

function initialize() {
  socket.init();
  state = STATE.listening;
  setInterval(readSensorValue, 100);
  socket.onMessage(function (data) {
    console.log(data);
    switch (state) {
      case STATE.listening:
      case STATE.pull:
        state = STATE.pull;
        pull();
        break;
      case STATE.push:
        state = STATE.connected;
        connect();
        break;
      case STATE.connected:
        // Nothing happens: we're connected
        break;
    }
  });
}

function readSensorValue() {
  if (touch.isPressed()) {
    console.log(touch.name() + " is pressed");
    switch (state) {
      case STATE.listening:
      case STATE.push:
        state = STATE.push;
        push();
        break;
      case STATE.pull:
        state = STATE.connected;
        connect();
        break;
      case STATE.connected:
        // Nothing happens: we're connected
        break;
    }
  }
}

function push() {
  socket.send({ event: 'push' });
  console.log('pushing', state);
  // TODO wait listen for 5 seconds and then go back to listening
}

function pull() {
  redLed.on();
  buzzer.playSound(buzzerModule.DO, 5000);
  console.log('pulling', state);
}

function connect() {
  socket.send({ event: 'push' });
  greenLed.on();
  redLed.off();
  console.log('connected!', state);
}

initialize();

// Print message when exiting
process.on('SIGINT', function () {
  console.log("Exiting...");
  process.exit(0);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLElBQUksZUFBZSxRQUFRLGNBQVIsQ0FBbkI7QUFDQSxJQUFJLGVBQWUsUUFBUSxjQUFSLENBQW5CO0FBQ0EsSUFBSSxjQUFjLFFBQVEsYUFBUixDQUFsQjtBQUNBLElBQUksU0FBUyxRQUFRLFVBQVIsQ0FBYjs7QUFFQSxJQUFNLFVBQVUsUUFBUSxXQUFSLENBQWhCO0FBQ0EsSUFBTSxRQUFRO0FBQ1osYUFBVyxDQURDO0FBRVosUUFBTSxDQUZNO0FBR1osUUFBTSxDQUhNO0FBSVosYUFBVztBQUpDLENBQWQ7O0FBT0EsSUFBSSxLQUFKOztBQUVBLElBQUksUUFBUSxJQUFJLGFBQWEsTUFBakIsQ0FBd0IsUUFBUSxLQUFoQyxDQUFaO0FBQ0EsSUFBSSxTQUFTLElBQUksYUFBYSxNQUFqQixDQUF3QixRQUFRLE1BQWhDLENBQWI7QUFDQSxJQUFJLFNBQVMsSUFBSSxZQUFZLFFBQWhCLENBQXlCLFFBQVEsSUFBUixDQUFhLEdBQXRDLENBQWI7QUFDQSxJQUFJLFdBQVcsSUFBSSxZQUFZLFFBQWhCLENBQXlCLFFBQVEsSUFBUixDQUFhLEtBQXRDLENBQWY7O0FBRUEsU0FBUyxVQUFULEdBQXNCO0FBQ3BCLFNBQU8sSUFBUDtBQUNBLFVBQVEsTUFBTSxTQUFkO0FBQ0EsY0FBWSxlQUFaLEVBQTZCLEdBQTdCO0FBQ0EsU0FBTyxTQUFQLENBQWlCLFVBQUMsSUFBRCxFQUFVO0FBQ3hCLFlBQVEsR0FBUixDQUFZLElBQVo7QUFDQSxZQUFRLEtBQVI7QUFDRSxXQUFLLE1BQU0sU0FBWDtBQUNBLFdBQUssTUFBTSxJQUFYO0FBQ0UsZ0JBQVEsTUFBTSxJQUFkO0FBQ0E7QUFDQTtBQUNGLFdBQUssTUFBTSxJQUFYO0FBQ0UsZ0JBQVEsTUFBTSxTQUFkO0FBQ0E7QUFDQTtBQUNGLFdBQUssTUFBTSxTQUFYOztBQUVFO0FBWko7QUFjRixHQWhCRDtBQWlCRDs7QUFFRCxTQUFTLGVBQVQsR0FBMkI7QUFDekIsTUFBSyxNQUFNLFNBQU4sRUFBTCxFQUF5QjtBQUN2QixZQUFRLEdBQVIsQ0FBWSxNQUFNLElBQU4sS0FBZSxhQUEzQjtBQUNBLFlBQVEsS0FBUjtBQUNFLFdBQUssTUFBTSxTQUFYO0FBQ0EsV0FBSyxNQUFNLElBQVg7QUFDRSxnQkFBUSxNQUFNLElBQWQ7QUFDQTtBQUNBO0FBQ0YsV0FBSyxNQUFNLElBQVg7QUFDRSxnQkFBUSxNQUFNLFNBQWQ7QUFDQTtBQUNBO0FBQ0YsV0FBSyxNQUFNLFNBQVg7O0FBRUU7QUFaSjtBQWNEO0FBQ0Y7O0FBRUQsU0FBUyxJQUFULEdBQWdCO0FBQ2QsU0FBTyxJQUFQLENBQVksRUFBQyxPQUFPLE1BQVIsRUFBWjtBQUNBLFVBQVEsR0FBUixDQUFZLFNBQVosRUFBdUIsS0FBdkI7O0FBRUQ7O0FBRUQsU0FBUyxJQUFULEdBQWdCO0FBQ2QsU0FBTyxFQUFQO0FBQ0EsU0FBTyxTQUFQLENBQWlCLGFBQWEsRUFBOUIsRUFBa0MsSUFBbEM7QUFDQSxVQUFRLEdBQVIsQ0FBWSxTQUFaLEVBQXVCLEtBQXZCO0FBQ0Q7O0FBRUQsU0FBUyxPQUFULEdBQW1CO0FBQ2pCLFNBQU8sSUFBUCxDQUFZLEVBQUMsT0FBTyxNQUFSLEVBQVo7QUFDQSxXQUFTLEVBQVQ7QUFDQSxTQUFPLEdBQVA7QUFDQSxVQUFRLEdBQVIsQ0FBWSxZQUFaLEVBQTBCLEtBQTFCO0FBQ0Q7O0FBRUQ7OztBQUdBLFFBQVEsRUFBUixDQUFXLFFBQVgsRUFBcUIsWUFDckI7QUFDQyxVQUFRLEdBQVIsQ0FBWSxZQUFaO0FBQ0EsVUFBUSxJQUFSLENBQWEsQ0FBYjtBQUNBLENBSkQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qanNsaW50IG5vZGU6dHJ1ZSwgdmFyczp0cnVlLCBiaXR3aXNlOnRydWUsIHVucGFyYW06dHJ1ZSAqL1xuLypqc2hpbnQgdW51c2VkOnRydWUgKi9cbi8qZ2xvYmFsICovXG4vKlxuICogQXV0aG9yOiBaaW9uIE9yZW50IDx6b3JlbnRAaWNzLmNvbT5cbiAqIENvcHlyaWdodCAoYykgMjAxNCBJbnRlbCBDb3Jwb3JhdGlvbi5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICogTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRVxuICogTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuICogT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4gKiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG52YXIgc2Vuc29yTW9kdWxlID0gcmVxdWlyZSgnanN1cG1fdHRwMjIzJyk7XG52YXIgYnV6emVyTW9kdWxlID0gcmVxdWlyZShcImpzdXBtX2J1enplclwiKTtcbnZhciBncm92ZVNlbnNvciA9IHJlcXVpcmUoXCJqc3VwbV9ncm92ZVwiKTtcbnZhciBzb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuXG5jb25zdCBTRU5TT1JTID0gcmVxdWlyZSgnLi9zZW5zb3JzJyk7XG5jb25zdCBTVEFURSA9IHtcbiAgbGlzdGVuaW5nOiAwLFxuICBwdXNoOiAxLFxuICBwdWxsOiAyLFxuICBjb25uZWN0ZWQ6IDNcbn07XG4vLyBnbG9iYWwgc3RhdGVcbnZhciBzdGF0ZTtcblxudmFyIHRvdWNoID0gbmV3IHNlbnNvck1vZHVsZS5UVFAyMjMoU0VOU09SUy50b3VjaCk7XG52YXIgYnV6emVyID0gbmV3IGJ1enplck1vZHVsZS5CdXp6ZXIoU0VOU09SUy5idXp6ZXIpO1xudmFyIHJlZExlZCA9IG5ldyBncm92ZVNlbnNvci5Hcm92ZUxlZChTRU5TT1JTLmxlZHMucmVkKTtcbnZhciBncmVlbkxlZCA9IG5ldyBncm92ZVNlbnNvci5Hcm92ZUxlZChTRU5TT1JTLmxlZHMuZ3JlZW4pO1xuXG5mdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICBzb2NrZXQuaW5pdCgpO1xuICBzdGF0ZSA9IFNUQVRFLmxpc3RlbmluZztcbiAgc2V0SW50ZXJ2YWwocmVhZFNlbnNvclZhbHVlLCAxMDApO1xuICBzb2NrZXQub25NZXNzYWdlKChkYXRhKSA9PiB7XG4gICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgY2FzZSBTVEFURS5saXN0ZW5pbmc6XG4gICAgICAgY2FzZSBTVEFURS5wdWxsOlxuICAgICAgICAgc3RhdGUgPSBTVEFURS5wdWxsO1xuICAgICAgICAgcHVsbCgpO1xuICAgICAgICAgYnJlYWs7XG4gICAgICAgY2FzZSBTVEFURS5wdXNoOlxuICAgICAgICAgc3RhdGUgPSBTVEFURS5jb25uZWN0ZWQ7XG4gICAgICAgICBjb25uZWN0KCk7XG4gICAgICAgICBicmVhaztcbiAgICAgICBjYXNlIFNUQVRFLmNvbm5lY3RlZDpcbiAgICAgICAgIC8vIE5vdGhpbmcgaGFwcGVuczogd2UncmUgY29ubmVjdGVkXG4gICAgICAgICBicmVhaztcbiAgICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVhZFNlbnNvclZhbHVlKCkge1xuICBpZiAoIHRvdWNoLmlzUHJlc3NlZCgpICkge1xuICAgIGNvbnNvbGUubG9nKHRvdWNoLm5hbWUoKSArIFwiIGlzIHByZXNzZWRcIik7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSBTVEFURS5saXN0ZW5pbmc6XG4gICAgICBjYXNlIFNUQVRFLnB1c2g6XG4gICAgICAgIHN0YXRlID0gU1RBVEUucHVzaDtcbiAgICAgICAgcHVzaCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RBVEUucHVsbDpcbiAgICAgICAgc3RhdGUgPSBTVEFURS5jb25uZWN0ZWRcbiAgICAgICAgY29ubmVjdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RBVEUuY29ubmVjdGVkOlxuICAgICAgICAvLyBOb3RoaW5nIGhhcHBlbnM6IHdlJ3JlIGNvbm5lY3RlZFxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVzaCgpIHtcbiAgc29ja2V0LnNlbmQoe2V2ZW50OiAncHVzaCd9KTtcbiAgY29uc29sZS5sb2coJ3B1c2hpbmcnLCBzdGF0ZSk7XG4gIC8vIFRPRE8gd2FpdCBsaXN0ZW4gZm9yIDUgc2Vjb25kcyBhbmQgdGhlbiBnbyBiYWNrIHRvIGxpc3RlbmluZ1xufVxuXG5mdW5jdGlvbiBwdWxsKCkge1xuICByZWRMZWQub24oKTtcbiAgYnV6emVyLnBsYXlTb3VuZChidXp6ZXJNb2R1bGUuRE8sIDUwMDApXG4gIGNvbnNvbGUubG9nKCdwdWxsaW5nJywgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0KCkge1xuICBzb2NrZXQuc2VuZCh7ZXZlbnQ6ICdwdXNoJ30pO1xuICBncmVlbkxlZC5vbigpO1xuICByZWRMZWQub2ZmKCk7XG4gIGNvbnNvbGUubG9nKCdjb25uZWN0ZWQhJywgc3RhdGUpO1xufVxuXG5pbml0aWFsaXplKCk7XG5cbi8vIFByaW50IG1lc3NhZ2Ugd2hlbiBleGl0aW5nXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCBmdW5jdGlvbigpXG57XG5cdGNvbnNvbGUubG9nKFwiRXhpdGluZy4uLlwiKTtcblx0cHJvY2Vzcy5leGl0KDApO1xufSk7XG4iXX0=