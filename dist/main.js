"use strict";

/*jslint node:true, vars:true, bitwise:true, unparam:true */
/*jshint unused:true */

var sensorModule = require('jsupm_ttp223');
var buzzerModule = require("jsupm_buzzer");
var lcdModule = require("jsupm_i2clcd");
var groveSensor = require("jsupm_grove");
var socket = require('./socket');

var SENSORS = require('./sensors');
var STATE = {
  listening: 0,
  connecting: {
    push: 1,
    pull: 2
  },
  connected: {
    push: 3,
    pull: 4
  }
};

var connectionExpiryTimeout = 3000;
var pullExpiredTimeout = 5000;
var leftConnectionTimeout = 1000;

// global state
var state;
var connectionTimeout;
var pullTimeout;
var rotaryInterval;

// lcd text buffer
var _currentText;

var touch = new sensorModule.TTP223(SENSORS.touch);
var buzzer = new buzzerModule.Buzzer(SENSORS.buzzer);
var lcd = new lcdModule.Jhd1313m1(SENSORS.lcd);
var redLed = new groveSensor.GroveLed(SENSORS.leds.red);
var greenLed = new groveSensor.GroveLed(SENSORS.leds.green);
var rotary = new groveSensor.GroveRotary(SENSORS.rotary);
// To use as follow
//rotary.abs_deg().toString()

function initialize() {
  socket.init(function () {
    // @todo remove -- this was debug only
    // state = STATE.connected;
    // socket.send({event: 'server:connected'});
  });

  state = STATE.listening;
  setInterval(readSensorValue, 100);

  socket.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (msg.event === 'push') {
      handlePushMessage();
    } else if (msg.event === 'expired') {
      handleExpiredMessage();
    } else if (msg.event === 'missed') {
      handleMissedMessage();
    } else if (msg.event === 'setText' && isConnected()) {
      setLcdText(msg.text);
    } else if (msg.event === 'requestAnswer' && isConnected()) {
      startReadingRotary(function (rotaryValue) {
        setLcdAnswer(rotaryValue);
        socket.send({ event: 'answer', value: rotaryValue });
      });
    } else if (msg.event === 'answer') {
      setLcdAnswer(msg.value);
    }
  });

  buzzer.playSound(buzzerModule.DO, 5000);
  buzzer.stopSound();
}

function isConnected() {
  return state === STATE.connected.push || state === STATE.connected.pull;
}

function startReadingRotary(cb) {
  rotaryInterval = setInterval(function () {
    var rotaryValue = rotary.abs_deg().toString();
    cb(rotaryValue);
  }, 200);
}

function stopReadingRotary() {
  clearInterval(rotaryInterval);
}

function handlePushMessage() {
  switch (state) {
    case STATE.listening:
    case STATE.connecting.pull:
      state = STATE.connecting.pull;
      pull();
      break;
    case STATE.connecting.push:
      state = STATE.connected.push;
      connect();
      break;
    case STATE.connected.push:
    case STATE.connected.pull:
      // Nothing happens: we're connected
      break;
  }
}

function handleExpiredMessage() {
  if (isConnected()) {
    connectionExpired();
  }
}

function handleMissedMessage() {
  switch (state) {
    case STATE.connecting.push:
      state = STATE.listening;
      updateState();
      break;
  }
}

function readSensorValue() {
  if (touch.isPressed()) {
    console.log(touch.name() + " is pressed");
    switch (state) {
      case STATE.listening:
      case STATE.connecting.push:
        state = STATE.connecting.push;
        push();
        break;
      case STATE.connecting.pull:
        state = STATE.connected.pull;
        connect();
        break;
      case STATE.connected.push:
      case STATE.connected.pull:
        resetExpiryTimeout();
        break;
    }
  } else {
    if (state === STATE.connecting.push) {
      state = STATE.listening;
      updateState();
    }
    // this makes sense but requires some more though.
    // the case is when you're connected and leave (stop holding)
    // you should eventually send an event signaling that you left so the
    // connection breaks
    // maybe we need another timeout here that will send this expiry *unless*
    // it gets
    else if (isConnected()) {
        leftConnection();
      }
  }
}

function push() {
  console.log('pushing', state);
  socket.send({ event: 'push' });
  updateState();
}

function pull() {
  console.log('pulling', state);

  updateState();
  buzzer.playSound(buzzerModule.DO, 5000);
  setTimeout(function () {
    return buzzer.stopSound();
  }, 500);

  if (pullTimeout) {
    clearTimeout(pullTimeout);
  }

  pullTimeout = setTimeout(pullExpired, pullExpiredTimeout);
}

function connect() {
  console.log('connected!', state);
  socket.send({ event: 'push' });
  socket.send({ event: 'server:connected', state: state });

  updateState();

  if (pullTimeout) {
    clearTimeout(pullTimeout);
  }

  connectionTimeout = setTimeout(connectionExpired, connectionExpiryTimeout);
}

function communicate() {
  if (state === STATE.connected.pull) {
    // TODO: can be:
    // * Speak -> pull means get state from them
    // *  Q/A, -> pull means answer (using rotary)
    // * Check weather > pull means display other weather
  } else if (state === STATE.connected.push) {
      // TODO: can be:
      // * Speak -> push means send state to them
      // *  Q/A, -> push means ask (using button to select)
      // * Check weather > push means send weather to them
    }
}

function pullExpired() {
  console.log('pull expired');

  state = STATE.listening;
  updateState();

  socket.send({ event: 'missed' });
}

function connectionExpired() {
  console.log('Connection expired!');
  state = STATE.listening;
  updateState();

  stopReadingRotary();

  clearTimeout(connectionTimeout);
  clearTimeout(leftConnectionTimeout);
  socket.send({ event: 'expired' });
  socket.send({ event: 'server:disconnected' });
}

function resetExpiryTimeout() {
  clearTimeout(connectionTimeout);
  clearTimeout(leftConnectionTimeout);

  connectionTimeout = setTimeout(connectionExpired, connectionExpiryTimeout);
  leftConnectionTimeout = null;
}

function leftConnection() {
  if (!leftConnectionTimeout) {
    leftConnectionTimeout = setTimeout(connectionExpired, connectionExpiryTimeout);
  }
}

function updateState() {
  switch (state) {
    case STATE.listening:
      redLed.off();
      greenLed.off();
      lcd.setColor(0, 0, 0);
      lcd.clear();
      break;
    case STATE.connecting.pull:
      redLed.on();
      greenLed.off();
      lcd.setColor(255, 0, 0);
      lcd.clear();
      lcd.write("Please, don't");
      lcd.setCursor(1, 0);
      lcd.write("let me hang!");
      lcd.setCursor(0, 0);
      break;
    case STATE.connecting.push:
      redLed.off();
      greenLed.off();
      lcd.setColor(0, 0, 255);
      lcd.clear();
      lcd.write("Anyone there?");
      break;
    case STATE.connected.push:
    case STATE.connected.pull:
      redLed.off();
      greenLed.on();
      lcd.setColor(0, 255, 0);
      lcd.clear();
      //lcd.write("Hello, World!");
      communicate();
      break;
  }
}

function setLcdText(text, scroll) {
  _currentText = text;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.write(text.substr(0, 14));
  lcd.setCursor(1, 0);
  lcd.write(text.substr(14, 30));
  if (scroll) lcd.scroll();

  if (text.length > 30) {
    setTimeout(function () {
      if (isConnected()) {
        setLcdText(text.substr(30));
      }
    }, 2000);
  }
}

function setLcdAnswer(value) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.write(_currentText);
  lcd.setCursor(1, 0);
  var emoji = "";
  if (value < 60) {
    emoji = "            :'(";
  } else if (value < 120) {
    emoji = "            :-(";
  } else if (value < 180) {
    emoji = "            :-|";
  } else if (value < 240) {
    emoji = "            :-)";
  } else {
    emoji = "            :-D";
  }
  lcd.write(emoji);
}

initialize();

// Print message when exiting
process.on('SIGINT', function () {
  socket.close();
  console.log("Exiting...");
  process.exit(0);
});
//# sourceMappingURL=data:application/json;base64,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QSxNQUFJLFNBQUosQ0FBYyxDQUFkLEVBQWdCLENBQWhCO0FBQ0EsTUFBSSxLQUFKLENBQVUsWUFBVjtBQUNBLE1BQUksU0FBSixDQUFjLENBQWQsRUFBZ0IsQ0FBaEI7QUFDQSxNQUFJLFFBQVEsRUFBWjtBQUNBLE1BQUksUUFBUSxFQUFaLEVBQWdCO0FBQ2QsWUFBUSxpQkFBUjtBQUNELEdBRkQsTUFFTyxJQUFJLFFBQVEsR0FBWixFQUFpQjtBQUN0QixZQUFRLGlCQUFSO0FBQ0QsR0FGTSxNQUVBLElBQUksUUFBUSxHQUFaLEVBQWlCO0FBQ3RCLFlBQVEsaUJBQVI7QUFDRCxHQUZNLE1BRUEsSUFBSSxRQUFRLEdBQVosRUFBaUI7QUFDdEIsWUFBUSxpQkFBUjtBQUNELEdBRk0sTUFFQTtBQUNMLFlBQVEsaUJBQVI7QUFDRDtBQUNELE1BQUksS0FBSixDQUFVLEtBQVY7QUFDRDs7QUFFRDs7O0FBR0EsUUFBUSxFQUFSLENBQVcsUUFBWCxFQUFxQixZQUNyQjtBQUNFLFNBQU8sS0FBUDtBQUNELFVBQVEsR0FBUixDQUFZLFlBQVo7QUFDQSxVQUFRLElBQVIsQ0FBYSxDQUFiO0FBQ0EsQ0FMRCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypqc2xpbnQgbm9kZTp0cnVlLCB2YXJzOnRydWUsIGJpdHdpc2U6dHJ1ZSwgdW5wYXJhbTp0cnVlICovXG4vKmpzaGludCB1bnVzZWQ6dHJ1ZSAqL1xuXG52YXIgc2Vuc29yTW9kdWxlID0gcmVxdWlyZSgnanN1cG1fdHRwMjIzJyk7XG52YXIgYnV6emVyTW9kdWxlID0gcmVxdWlyZShcImpzdXBtX2J1enplclwiKTtcbnZhciBsY2RNb2R1bGUgPSByZXF1aXJlKFwianN1cG1faTJjbGNkXCIpO1xudmFyIGdyb3ZlU2Vuc29yID0gcmVxdWlyZShcImpzdXBtX2dyb3ZlXCIpO1xudmFyIHNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbmNvbnN0IFNFTlNPUlMgPSByZXF1aXJlKCcuL3NlbnNvcnMnKTtcbmNvbnN0IFNUQVRFID0ge1xuICBsaXN0ZW5pbmc6IDAsXG4gIGNvbm5lY3Rpbmc6IHtcbiAgICBwdXNoOiAxLFxuICAgIHB1bGw6IDJcbiAgfSxcbiAgY29ubmVjdGVkOiB7XG4gICAgcHVzaDogMyxcbiAgICBwdWxsOiA0XG4gIH1cbn07XG5cbnZhciBjb25uZWN0aW9uRXhwaXJ5VGltZW91dCA9IDMwMDA7XG52YXIgcHVsbEV4cGlyZWRUaW1lb3V0ID0gNTAwMDtcbnZhciBsZWZ0Q29ubmVjdGlvblRpbWVvdXQgPSAxMDAwO1xuXG4vLyBnbG9iYWwgc3RhdGVcbnZhciBzdGF0ZTtcbnZhciBjb25uZWN0aW9uVGltZW91dDtcbnZhciBwdWxsVGltZW91dDtcbnZhciByb3RhcnlJbnRlcnZhbDtcblxuLy8gbGNkIHRleHQgYnVmZmVyXG52YXIgX2N1cnJlbnRUZXh0O1xuXG52YXIgdG91Y2ggPSBuZXcgc2Vuc29yTW9kdWxlLlRUUDIyMyhTRU5TT1JTLnRvdWNoKTtcbnZhciBidXp6ZXIgPSBuZXcgYnV6emVyTW9kdWxlLkJ1enplcihTRU5TT1JTLmJ1enplcik7XG52YXIgbGNkID0gbmV3IGxjZE1vZHVsZS5KaGQxMzEzbTEoU0VOU09SUy5sY2QpO1xudmFyIHJlZExlZCA9IG5ldyBncm92ZVNlbnNvci5Hcm92ZUxlZChTRU5TT1JTLmxlZHMucmVkKTtcbnZhciBncmVlbkxlZCA9IG5ldyBncm92ZVNlbnNvci5Hcm92ZUxlZChTRU5TT1JTLmxlZHMuZ3JlZW4pO1xudmFyIHJvdGFyeSA9IG5ldyBncm92ZVNlbnNvci5Hcm92ZVJvdGFyeShTRU5TT1JTLnJvdGFyeSk7XG4vLyBUbyB1c2UgYXMgZm9sbG93XG4vL3JvdGFyeS5hYnNfZGVnKCkudG9TdHJpbmcoKVxuXG5mdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICBzb2NrZXQuaW5pdCgoKSA9PiB7XG4gICAgLy8gQHRvZG8gcmVtb3ZlIC0tIHRoaXMgd2FzIGRlYnVnIG9ubHlcbiAgICAvLyBzdGF0ZSA9IFNUQVRFLmNvbm5lY3RlZDtcbiAgICAvLyBzb2NrZXQuc2VuZCh7ZXZlbnQ6ICdzZXJ2ZXI6Y29ubmVjdGVkJ30pO1xuICB9KTtcblxuICBzdGF0ZSA9IFNUQVRFLmxpc3RlbmluZztcbiAgc2V0SW50ZXJ2YWwocmVhZFNlbnNvclZhbHVlLCAxMDApO1xuXG4gIHNvY2tldC5vbk1lc3NhZ2UoKGRhdGEpID0+IHtcbiAgICAgdmFyIG1zZyA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICAgaWYobXNnLmV2ZW50ID09PSAncHVzaCcpe1xuICAgICAgICBoYW5kbGVQdXNoTWVzc2FnZSgpXG4gICAgIH0gZWxzZSBpZihtc2cuZXZlbnQgPT09ICdleHBpcmVkJyl7XG4gICAgICAgIGhhbmRsZUV4cGlyZWRNZXNzYWdlKCk7XG4gICAgIH0gZWxzZSBpZihtc2cuZXZlbnQgPT09ICdtaXNzZWQnKXtcbiAgICAgICAgaGFuZGxlTWlzc2VkTWVzc2FnZSgpO1xuICAgICB9IGVsc2UgaWYobXNnLmV2ZW50ID09PSAnc2V0VGV4dCcgJiYgaXNDb25uZWN0ZWQoKSl7XG4gICAgICAgIHNldExjZFRleHQobXNnLnRleHQpO1xuICAgICB9IGVsc2UgaWYobXNnLmV2ZW50ID09PSAncmVxdWVzdEFuc3dlcicgJiYgaXNDb25uZWN0ZWQoKSl7XG4gICAgICAgIHN0YXJ0UmVhZGluZ1JvdGFyeShyb3RhcnlWYWx1ZSA9PiB7XG4gICAgICAgICAgc2V0TGNkQW5zd2VyKHJvdGFyeVZhbHVlKTtcbiAgICAgICAgICBzb2NrZXQuc2VuZCh7ZXZlbnQ6ICdhbnN3ZXInLCB2YWx1ZTogcm90YXJ5VmFsdWV9KTtcbiAgICAgICAgfSlcbiAgICAgfSBlbHNlIGlmKG1zZy5ldmVudCA9PT0gJ2Fuc3dlcicpe1xuICAgICAgICBzZXRMY2RBbnN3ZXIobXNnLnZhbHVlKTtcbiAgICAgfVxuICB9KTtcblxuICBidXp6ZXIucGxheVNvdW5kKGJ1enplck1vZHVsZS5ETywgNTAwMCk7XG4gIGJ1enplci5zdG9wU291bmQoKTtcbn1cblxuZnVuY3Rpb24gaXNDb25uZWN0ZWQoKSB7XG4gIHJldHVybiBzdGF0ZSA9PT0gU1RBVEUuY29ubmVjdGVkLnB1c2ggfHwgc3RhdGUgPT09IFNUQVRFLmNvbm5lY3RlZC5wdWxsO1xufVxuXG5mdW5jdGlvbiBzdGFydFJlYWRpbmdSb3RhcnkoY2Ipe1xuICByb3RhcnlJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICB2YXIgcm90YXJ5VmFsdWUgPSByb3RhcnkuYWJzX2RlZygpLnRvU3RyaW5nKCk7XG4gICAgY2Iocm90YXJ5VmFsdWUpO1xuICB9LCAyMDApO1xufVxuXG5mdW5jdGlvbiBzdG9wUmVhZGluZ1JvdGFyeSgpe1xuICBjbGVhckludGVydmFsKHJvdGFyeUludGVydmFsKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHVzaE1lc3NhZ2UoKXtcbiAgc3dpdGNoIChzdGF0ZSkge1xuICAgY2FzZSBTVEFURS5saXN0ZW5pbmc6XG4gICBjYXNlIFNUQVRFLmNvbm5lY3RpbmcucHVsbDpcbiAgICAgc3RhdGUgPSBTVEFURS5jb25uZWN0aW5nLnB1bGw7XG4gICAgIHB1bGwoKTtcbiAgICAgYnJlYWs7XG4gICBjYXNlIFNUQVRFLmNvbm5lY3RpbmcucHVzaDpcbiAgICAgc3RhdGUgPSBTVEFURS5jb25uZWN0ZWQucHVzaDtcbiAgICAgY29ubmVjdCgpO1xuICAgICBicmVhaztcbiAgIGNhc2UgU1RBVEUuY29ubmVjdGVkLnB1c2g6XG4gICBjYXNlIFNUQVRFLmNvbm5lY3RlZC5wdWxsOlxuICAgICAvLyBOb3RoaW5nIGhhcHBlbnM6IHdlJ3JlIGNvbm5lY3RlZFxuICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFeHBpcmVkTWVzc2FnZSgpe1xuICBpZiAoaXNDb25uZWN0ZWQoKSkge1xuICAgICBjb25uZWN0aW9uRXhwaXJlZCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1pc3NlZE1lc3NhZ2UoKXtcbiAgc3dpdGNoKHN0YXRlKXtcbiAgICBjYXNlIFNUQVRFLmNvbm5lY3RpbmcucHVzaDpcbiAgICAgIHN0YXRlID0gU1RBVEUubGlzdGVuaW5nO1xuICAgICAgdXBkYXRlU3RhdGUoKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRTZW5zb3JWYWx1ZSgpIHtcbiAgaWYgKCB0b3VjaC5pc1ByZXNzZWQoKSApIHtcbiAgICBjb25zb2xlLmxvZyh0b3VjaC5uYW1lKCkgKyBcIiBpcyBwcmVzc2VkXCIpO1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgU1RBVEUubGlzdGVuaW5nOlxuICAgICAgY2FzZSBTVEFURS5jb25uZWN0aW5nLnB1c2g6XG4gICAgICAgIHN0YXRlID0gU1RBVEUuY29ubmVjdGluZy5wdXNoO1xuICAgICAgICBwdXNoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTVEFURS5jb25uZWN0aW5nLnB1bGw6XG4gICAgICAgIHN0YXRlID0gU1RBVEUuY29ubmVjdGVkLnB1bGw7XG4gICAgICAgIGNvbm5lY3QoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNUQVRFLmNvbm5lY3RlZC5wdXNoOlxuICAgICAgY2FzZSBTVEFURS5jb25uZWN0ZWQucHVsbDpcbiAgICAgICAgcmVzZXRFeHBpcnlUaW1lb3V0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RhdGUgPT09IFNUQVRFLmNvbm5lY3RpbmcucHVzaCkge1xuICAgICAgc3RhdGUgPSBTVEFURS5saXN0ZW5pbmc7XG4gICAgICB1cGRhdGVTdGF0ZSgpO1xuICAgIH1cbiAgICAvLyB0aGlzIG1ha2VzIHNlbnNlIGJ1dCByZXF1aXJlcyBzb21lIG1vcmUgdGhvdWdoLlxuICAgIC8vIHRoZSBjYXNlIGlzIHdoZW4geW91J3JlIGNvbm5lY3RlZCBhbmQgbGVhdmUgKHN0b3AgaG9sZGluZylcbiAgICAvLyB5b3Ugc2hvdWxkIGV2ZW50dWFsbHkgc2VuZCBhbiBldmVudCBzaWduYWxpbmcgdGhhdCB5b3UgbGVmdCBzbyB0aGVcbiAgICAvLyBjb25uZWN0aW9uIGJyZWFrc1xuICAgIC8vIG1heWJlIHdlIG5lZWQgYW5vdGhlciB0aW1lb3V0IGhlcmUgdGhhdCB3aWxsIHNlbmQgdGhpcyBleHBpcnkgKnVubGVzcypcbiAgICAvLyBpdCBnZXRzXG4gICAgZWxzZSBpZihpc0Nvbm5lY3RlZCgpKXtcbiAgICAgIGxlZnRDb25uZWN0aW9uKCk7XG4gICAgfVxuXG4gIH1cbn1cblxuZnVuY3Rpb24gcHVzaCgpIHtcbiAgY29uc29sZS5sb2coJ3B1c2hpbmcnLCBzdGF0ZSk7XG4gIHNvY2tldC5zZW5kKHtldmVudDogJ3B1c2gnfSk7XG4gIHVwZGF0ZVN0YXRlKCk7XG59XG5cbmZ1bmN0aW9uIHB1bGwoKSB7XG4gIGNvbnNvbGUubG9nKCdwdWxsaW5nJywgc3RhdGUpO1xuXG4gIHVwZGF0ZVN0YXRlKCk7XG4gIGJ1enplci5wbGF5U291bmQoYnV6emVyTW9kdWxlLkRPLCA1MDAwKVxuICBzZXRUaW1lb3V0KCgpID0+IGJ1enplci5zdG9wU291bmQoKSwgNTAwKTtcblxuICBpZihwdWxsVGltZW91dCl7XG4gICAgY2xlYXJUaW1lb3V0KHB1bGxUaW1lb3V0KVxuICB9XG5cbiAgcHVsbFRpbWVvdXQgPSBzZXRUaW1lb3V0KHB1bGxFeHBpcmVkLCBwdWxsRXhwaXJlZFRpbWVvdXQpO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0KCkge1xuICBjb25zb2xlLmxvZygnY29ubmVjdGVkIScsIHN0YXRlKTtcbiAgc29ja2V0LnNlbmQoe2V2ZW50OiAncHVzaCd9KTtcbiAgc29ja2V0LnNlbmQoe2V2ZW50OiAnc2VydmVyOmNvbm5lY3RlZCcsIHN0YXRlOiBzdGF0ZX0pO1xuXG4gIHVwZGF0ZVN0YXRlKCk7XG5cbiAgaWYocHVsbFRpbWVvdXQpe1xuICAgIGNsZWFyVGltZW91dChwdWxsVGltZW91dClcbiAgfVxuXG4gIGNvbm5lY3Rpb25UaW1lb3V0ID0gc2V0VGltZW91dChjb25uZWN0aW9uRXhwaXJlZCwgY29ubmVjdGlvbkV4cGlyeVRpbWVvdXQpO1xufVxuXG5mdW5jdGlvbiBjb21tdW5pY2F0ZSgpIHtcbiAgaWYgKHN0YXRlID09PSBTVEFURS5jb25uZWN0ZWQucHVsbCkge1xuICAgIC8vIFRPRE86IGNhbiBiZTpcbiAgICAvLyAqIFNwZWFrIC0+IHB1bGwgbWVhbnMgZ2V0IHN0YXRlIGZyb20gdGhlbVxuICAgIC8vICogIFEvQSwgLT4gcHVsbCBtZWFucyBhbnN3ZXIgKHVzaW5nIHJvdGFyeSlcbiAgICAvLyAqIENoZWNrIHdlYXRoZXIgPiBwdWxsIG1lYW5zIGRpc3BsYXkgb3RoZXIgd2VhdGhlclxuICB9IGVsc2UgaWYgKHN0YXRlID09PSBTVEFURS5jb25uZWN0ZWQucHVzaCkge1xuICAgIC8vIFRPRE86IGNhbiBiZTpcbiAgICAvLyAqIFNwZWFrIC0+IHB1c2ggbWVhbnMgc2VuZCBzdGF0ZSB0byB0aGVtXG4gICAgLy8gKiAgUS9BLCAtPiBwdXNoIG1lYW5zIGFzayAodXNpbmcgYnV0dG9uIHRvIHNlbGVjdClcbiAgICAvLyAqIENoZWNrIHdlYXRoZXIgPiBwdXNoIG1lYW5zIHNlbmQgd2VhdGhlciB0byB0aGVtXG4gIH1cbn1cblxuZnVuY3Rpb24gcHVsbEV4cGlyZWQoKXtcbiAgY29uc29sZS5sb2coJ3B1bGwgZXhwaXJlZCcpO1xuXG4gIHN0YXRlID0gU1RBVEUubGlzdGVuaW5nO1xuICB1cGRhdGVTdGF0ZSgpO1xuXG4gIHNvY2tldC5zZW5kKHtldmVudDogJ21pc3NlZCd9KTtcbn1cblxuZnVuY3Rpb24gY29ubmVjdGlvbkV4cGlyZWQoKXtcbiAgY29uc29sZS5sb2coJ0Nvbm5lY3Rpb24gZXhwaXJlZCEnKTtcbiAgc3RhdGUgPSBTVEFURS5saXN0ZW5pbmc7XG4gIHVwZGF0ZVN0YXRlKCk7XG5cbiAgc3RvcFJlYWRpbmdSb3RhcnkoKTtcblxuICBjbGVhclRpbWVvdXQoY29ubmVjdGlvblRpbWVvdXQpO1xuICBjbGVhclRpbWVvdXQobGVmdENvbm5lY3Rpb25UaW1lb3V0KTtcbiAgc29ja2V0LnNlbmQoe2V2ZW50OiAnZXhwaXJlZCd9KTtcbiAgc29ja2V0LnNlbmQoe2V2ZW50OiAnc2VydmVyOmRpc2Nvbm5lY3RlZCd9KTtcblxufVxuXG5mdW5jdGlvbiByZXNldEV4cGlyeVRpbWVvdXQoKXtcbiAgY2xlYXJUaW1lb3V0KGNvbm5lY3Rpb25UaW1lb3V0KTtcbiAgY2xlYXJUaW1lb3V0KGxlZnRDb25uZWN0aW9uVGltZW91dCk7XG5cbiAgY29ubmVjdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KGNvbm5lY3Rpb25FeHBpcmVkLCBjb25uZWN0aW9uRXhwaXJ5VGltZW91dCk7XG4gIGxlZnRDb25uZWN0aW9uVGltZW91dCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGxlZnRDb25uZWN0aW9uKCl7XG4gIGlmKCFsZWZ0Q29ubmVjdGlvblRpbWVvdXQpe1xuICAgIGxlZnRDb25uZWN0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoY29ubmVjdGlvbkV4cGlyZWQsIGNvbm5lY3Rpb25FeHBpcnlUaW1lb3V0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVTdGF0ZSgpe1xuICBzd2l0Y2goc3RhdGUpe1xuICAgIGNhc2UgU1RBVEUubGlzdGVuaW5nOlxuICAgICAgcmVkTGVkLm9mZigpO1xuICAgICAgZ3JlZW5MZWQub2ZmKCk7XG4gICAgICBsY2Quc2V0Q29sb3IoMCwgMCwgMCk7XG4gICAgICBsY2QuY2xlYXIoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU1RBVEUuY29ubmVjdGluZy5wdWxsOlxuICAgICAgcmVkTGVkLm9uKCk7XG4gICAgICBncmVlbkxlZC5vZmYoKTtcbiAgICAgIGxjZC5zZXRDb2xvcigyNTUsIDAsIDApO1xuICAgICAgbGNkLmNsZWFyKCk7XG4gICAgICBsY2Qud3JpdGUoXCJQbGVhc2UsIGRvbid0XCIpO1xuICAgICAgbGNkLnNldEN1cnNvcigxLDApO1xuICAgICAgbGNkLndyaXRlKFwibGV0IG1lIGhhbmchXCIpO1xuICAgICAgbGNkLnNldEN1cnNvcigwLDApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTVEFURS5jb25uZWN0aW5nLnB1c2g6XG4gICAgICByZWRMZWQub2ZmKCk7XG4gICAgICBncmVlbkxlZC5vZmYoKTtcbiAgICAgIGxjZC5zZXRDb2xvcigwLCAwLCAyNTUpO1xuICAgICAgbGNkLmNsZWFyKCk7XG4gICAgICBsY2Qud3JpdGUoXCJBbnlvbmUgdGhlcmU/XCIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTVEFURS5jb25uZWN0ZWQucHVzaDpcbiAgICBjYXNlIFNUQVRFLmNvbm5lY3RlZC5wdWxsOlxuICAgICAgcmVkTGVkLm9mZigpO1xuICAgICAgZ3JlZW5MZWQub24oKTtcbiAgICAgIGxjZC5zZXRDb2xvcigwLCAyNTUsIDApO1xuICAgICAgbGNkLmNsZWFyKCk7XG4gICAgICAvL2xjZC53cml0ZShcIkhlbGxvLCBXb3JsZCFcIik7XG4gICAgICBjb21tdW5pY2F0ZSgpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0TGNkVGV4dCh0ZXh0LCBzY3JvbGwpe1xuICBfY3VycmVudFRleHQgPSB0ZXh0O1xuXG4gIGxjZC5jbGVhcigpO1xuICBsY2Quc2V0Q3Vyc29yKDAsMCk7XG4gIGxjZC53cml0ZSh0ZXh0LnN1YnN0cigwLCAxNCkpO1xuICBsY2Quc2V0Q3Vyc29yKDEsMCk7XG4gIGxjZC53cml0ZSh0ZXh0LnN1YnN0cigxNCwgMzApKTtcbiAgaWYoc2Nyb2xsKSBsY2Quc2Nyb2xsKCk7XG5cbiAgaWYodGV4dC5sZW5ndGggPiAzMCl7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZihpc0Nvbm5lY3RlZCgpKXtcbiAgICAgICAgc2V0TGNkVGV4dCh0ZXh0LnN1YnN0cigzMCkpO1xuICAgICAgfVxuICAgIH0sIDIwMDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldExjZEFuc3dlcih2YWx1ZSl7XG4gIGxjZC5jbGVhcigpO1xuICBsY2Quc2V0Q3Vyc29yKDAsMCk7XG4gIGxjZC53cml0ZShfY3VycmVudFRleHQpO1xuICBsY2Quc2V0Q3Vyc29yKDEsMCk7XG4gIHZhciBlbW9qaSA9IFwiXCI7XG4gIGlmICh2YWx1ZSA8IDYwKSB7XG4gICAgZW1vamkgPSBcIiAgICAgICAgICAgIDonKFwiO1xuICB9IGVsc2UgaWYgKHZhbHVlIDwgMTIwKSB7XG4gICAgZW1vamkgPSBcIiAgICAgICAgICAgIDotKFwiO1xuICB9IGVsc2UgaWYgKHZhbHVlIDwgMTgwKSB7XG4gICAgZW1vamkgPSBcIiAgICAgICAgICAgIDotfFwiO1xuICB9IGVsc2UgaWYgKHZhbHVlIDwgMjQwKSB7XG4gICAgZW1vamkgPSBcIiAgICAgICAgICAgIDotKVwiO1xuICB9IGVsc2Uge1xuICAgIGVtb2ppID0gXCIgICAgICAgICAgICA6LURcIjtcbiAgfVxuICBsY2Qud3JpdGUoZW1vamkpO1xufVxuXG5pbml0aWFsaXplKCk7XG5cbi8vIFByaW50IG1lc3NhZ2Ugd2hlbiBleGl0aW5nXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCBmdW5jdGlvbigpXG57XG4gIHNvY2tldC5jbG9zZSgpO1xuXHRjb25zb2xlLmxvZyhcIkV4aXRpbmcuLi5cIik7XG5cdHByb2Nlc3MuZXhpdCgwKTtcbn0pO1xuIl19