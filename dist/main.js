"use strict";

/*jslint node:true, vars:true, bitwise:true, unparam:true */
/*jshint unused:true */
/*global */
/*
 * Author: Zion Orent <zorent@ics.com>
 * Copyright (c) 2014 Intel Corporation.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var sensorModule = require('jsupm_ttp223');
var buzzerModule = require("jsupm_buzzer");
var groveSensor = require("jsupm_grove");
var socket = require('./socket');

var SENSORS = require('./sensors');
var STATE = {
  listening: 0,
  push: 1,
  pull: 2,
  connected: 3
};
// global state
var state;
var connectionTimeout;
var pullTimeout;

var touch = new sensorModule.TTP223(SENSORS.touch);
var buzzer = new buzzerModule.Buzzer(SENSORS.buzzer);
var redLed = new groveSensor.GroveLed(SENSORS.leds.red);
var greenLed = new groveSensor.GroveLed(SENSORS.leds.green);

function initialize() {
  socket.init();
  state = STATE.listening;
  setInterval(readSensorValue, 100);

  socket.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (msg.event === 'push') {
      handlePushMessage();
    } else if (msg.event === 'expired') {
      handleExpiredMessage();
    } else if (msg.event === 'missed') {
      handleMissedMessage();
    }
  });
}

function handlePushMessage() {
  switch (state) {
    case STATE.listening:
    case STATE.pull:
      state = STATE.pull;
      pull();
      break;
    case STATE.push:
      state = STATE.connected;
      connect();
      break;
    case STATE.connected:
      // Nothing happens: we're connected
      break;
  }
}

function handleExpiredMessage() {
  switch (state) {
    case STATE.connected:
      connectionExpired();
      break;
  }
}

function handleMissedMessage() {
  switch (state) {
    case STATE.push:
      state = STATE.listening;
      updateState();
      break;
  }
}

function readSensorValue() {
  if (touch.isPressed()) {
    console.log(touch.name() + " is pressed");
    switch (state) {
      case STATE.listening:
      case STATE.push:
        state = STATE.push;
        push();
        break;
      case STATE.pull:
        state = STATE.connected;
        connect();
        break;
      case STATE.connected:
        resetExpiryTimeout();
        break;
    }
  }
}

function push() {
  console.log('pushing', state);
  socket.send({ event: 'push' });
  updateState();
  // TODO wait listen for 5 seconds and then go back to listening
}

function pull() {
  console.log('pulling', state);

  updateState();
  buzzer.playSound(buzzerModule.DO, 5000);
  setTimeout(function () {
    return buzzer.stopSound();
  }, 500);

  if (pullTimeout) {
    clearTimeout(pullTimeout);
  }

  pullTimeout = setTimeout(pullExpired, 5000);
}

function connect() {
  console.log('connected!', state);
  socket.send({ event: 'push' });

  updateState();

  if (pullTimeout) {
    clearTimeout(pullTimeout);
  }

  connectionTimeout = setTimeout(connectionExpired, 500);
}

function pullExpired() {
  console.log('pull expired');

  state = STATE.listening;
  updateState();

  socket.send({ event: 'missed' });
}

function connectionExpired() {
  console.log('Connection expired!');
  state = STATE.listening;
  updateState();

  clearTimeout(connectionTimeout);
  socket.send({ event: 'expired' });
}

function resetExpiryTimeout() {
  clearTimeout(connectionTimeout);
  connectionTimeout = setTimeout(connectionExpired, 500);
}

function updateState() {
  switch (state) {
    case STATE.listening:
      redLed.off();
      greenLed.off();
      break;
    case STATE.pull:
      redLed.on();
      greenLed.off();
      break;
    case STATE.push:
      redLed.off();
      greenLed.off();
      break;
    case STATE.connected:
      redLed.off();
      greenLed.on();
      break;
  }
}

initialize();

// Print message when exiting
process.on('SIGINT', function () {
  console.log("Exiting...");
  process.exit(0);
});
//# sourceMappingURL=data:application/json;base64,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RixTQUFLLE1BQU0sU0FBWDtBQUNFLGFBQU8sR0FBUDtBQUNBLGVBQVMsRUFBVDtBQUNBO0FBaEJKO0FBa0JEOztBQUVEOzs7QUFHQSxRQUFRLEVBQVIsQ0FBVyxRQUFYLEVBQXFCLFlBQ3JCO0FBQ0MsVUFBUSxHQUFSLENBQVksWUFBWjtBQUNBLFVBQVEsSUFBUixDQUFhLENBQWI7QUFDQSxDQUpEIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzbGludCBub2RlOnRydWUsIHZhcnM6dHJ1ZSwgYml0d2lzZTp0cnVlLCB1bnBhcmFtOnRydWUgKi9cbi8qanNoaW50IHVudXNlZDp0cnVlICovXG4vKmdsb2JhbCAqL1xuLypcbiAqIEF1dGhvcjogWmlvbiBPcmVudCA8em9yZW50QGljcy5jb20+XG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgSW50ZWwgQ29ycG9yYXRpb24uXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4gKiBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAqIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbiAqIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuICogV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxudmFyIHNlbnNvck1vZHVsZSA9IHJlcXVpcmUoJ2pzdXBtX3R0cDIyMycpO1xudmFyIGJ1enplck1vZHVsZSA9IHJlcXVpcmUoXCJqc3VwbV9idXp6ZXJcIik7XG52YXIgZ3JvdmVTZW5zb3IgPSByZXF1aXJlKFwianN1cG1fZ3JvdmVcIik7XG52YXIgc29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuY29uc3QgU0VOU09SUyA9IHJlcXVpcmUoJy4vc2Vuc29ycycpO1xuY29uc3QgU1RBVEUgPSB7XG4gIGxpc3RlbmluZzogMCxcbiAgcHVzaDogMSxcbiAgcHVsbDogMixcbiAgY29ubmVjdGVkOiAzXG59O1xuLy8gZ2xvYmFsIHN0YXRlXG52YXIgc3RhdGU7XG52YXIgY29ubmVjdGlvblRpbWVvdXQ7XG52YXIgcHVsbFRpbWVvdXQ7XG5cbnZhciB0b3VjaCA9IG5ldyBzZW5zb3JNb2R1bGUuVFRQMjIzKFNFTlNPUlMudG91Y2gpO1xudmFyIGJ1enplciA9IG5ldyBidXp6ZXJNb2R1bGUuQnV6emVyKFNFTlNPUlMuYnV6emVyKTtcbnZhciByZWRMZWQgPSBuZXcgZ3JvdmVTZW5zb3IuR3JvdmVMZWQoU0VOU09SUy5sZWRzLnJlZCk7XG52YXIgZ3JlZW5MZWQgPSBuZXcgZ3JvdmVTZW5zb3IuR3JvdmVMZWQoU0VOU09SUy5sZWRzLmdyZWVuKTtcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgc29ja2V0LmluaXQoKTtcbiAgc3RhdGUgPSBTVEFURS5saXN0ZW5pbmc7XG4gIHNldEludGVydmFsKHJlYWRTZW5zb3JWYWx1ZSwgMTAwKTtcblxuICBzb2NrZXQub25NZXNzYWdlKChkYXRhKSA9PiB7XG4gICAgIHZhciBtc2cgPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgIGlmKG1zZy5ldmVudCA9PT0gJ3B1c2gnKXtcbiAgICAgICAgaGFuZGxlUHVzaE1lc3NhZ2UoKVxuICAgICB9IGVsc2UgaWYobXNnLmV2ZW50ID09PSAnZXhwaXJlZCcpe1xuICAgICAgICBoYW5kbGVFeHBpcmVkTWVzc2FnZSgpO1xuICAgICB9IGVsc2UgaWYobXNnLmV2ZW50ID09PSAnbWlzc2VkJyl7XG4gICAgICAgIGhhbmRsZU1pc3NlZE1lc3NhZ2UoKTtcbiAgICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHVzaE1lc3NhZ2UoKXtcbiAgc3dpdGNoIChzdGF0ZSkge1xuICAgY2FzZSBTVEFURS5saXN0ZW5pbmc6XG4gICBjYXNlIFNUQVRFLnB1bGw6XG4gICAgIHN0YXRlID0gU1RBVEUucHVsbDtcbiAgICAgcHVsbCgpO1xuICAgICBicmVhaztcbiAgIGNhc2UgU1RBVEUucHVzaDpcbiAgICAgc3RhdGUgPSBTVEFURS5jb25uZWN0ZWQ7XG4gICAgIGNvbm5lY3QoKTtcbiAgICAgYnJlYWs7XG4gICBjYXNlIFNUQVRFLmNvbm5lY3RlZDpcbiAgICAgLy8gTm90aGluZyBoYXBwZW5zOiB3ZSdyZSBjb25uZWN0ZWRcbiAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXhwaXJlZE1lc3NhZ2UoKXtcbiAgc3dpdGNoKHN0YXRlKXtcbiAgICBjYXNlIFNUQVRFLmNvbm5lY3RlZDpcbiAgICAgIGNvbm5lY3Rpb25FeHBpcmVkKCk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNaXNzZWRNZXNzYWdlKCl7XG4gIHN3aXRjaChzdGF0ZSl7XG4gICAgY2FzZSBTVEFURS5wdXNoOlxuICAgICAgc3RhdGUgPSBTVEFURS5saXN0ZW5pbmc7XG4gICAgICB1cGRhdGVTdGF0ZSgpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZFNlbnNvclZhbHVlKCkge1xuICBpZiAoIHRvdWNoLmlzUHJlc3NlZCgpICkge1xuICAgIGNvbnNvbGUubG9nKHRvdWNoLm5hbWUoKSArIFwiIGlzIHByZXNzZWRcIik7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSBTVEFURS5saXN0ZW5pbmc6XG4gICAgICBjYXNlIFNUQVRFLnB1c2g6XG4gICAgICAgIHN0YXRlID0gU1RBVEUucHVzaDtcbiAgICAgICAgcHVzaCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RBVEUucHVsbDpcbiAgICAgICAgc3RhdGUgPSBTVEFURS5jb25uZWN0ZWRcbiAgICAgICAgY29ubmVjdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RBVEUuY29ubmVjdGVkOlxuICAgICAgICByZXNldEV4cGlyeVRpbWVvdXQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHB1c2goKSB7XG4gIGNvbnNvbGUubG9nKCdwdXNoaW5nJywgc3RhdGUpO1xuICBzb2NrZXQuc2VuZCh7ZXZlbnQ6ICdwdXNoJ30pO1xuICB1cGRhdGVTdGF0ZSgpO1xuICAvLyBUT0RPIHdhaXQgbGlzdGVuIGZvciA1IHNlY29uZHMgYW5kIHRoZW4gZ28gYmFjayB0byBsaXN0ZW5pbmdcbn1cblxuZnVuY3Rpb24gcHVsbCgpIHtcbiAgY29uc29sZS5sb2coJ3B1bGxpbmcnLCBzdGF0ZSk7XG5cbiAgdXBkYXRlU3RhdGUoKTtcbiAgYnV6emVyLnBsYXlTb3VuZChidXp6ZXJNb2R1bGUuRE8sIDUwMDApXG4gIHNldFRpbWVvdXQoKCkgPT4gYnV6emVyLnN0b3BTb3VuZCgpLCA1MDApO1xuXG4gIGlmKHB1bGxUaW1lb3V0KXtcbiAgICBjbGVhclRpbWVvdXQocHVsbFRpbWVvdXQpXG4gIH1cblxuICBwdWxsVGltZW91dCA9IHNldFRpbWVvdXQocHVsbEV4cGlyZWQsIDUwMDApO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0KCkge1xuICBjb25zb2xlLmxvZygnY29ubmVjdGVkIScsIHN0YXRlKTtcbiAgc29ja2V0LnNlbmQoe2V2ZW50OiAncHVzaCd9KTtcblxuICB1cGRhdGVTdGF0ZSgpO1xuXG4gIGlmKHB1bGxUaW1lb3V0KXtcbiAgICBjbGVhclRpbWVvdXQocHVsbFRpbWVvdXQpXG4gIH1cblxuICBjb25uZWN0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoY29ubmVjdGlvbkV4cGlyZWQsIDUwMCk7XG59XG5cbmZ1bmN0aW9uIHB1bGxFeHBpcmVkKCl7XG4gIGNvbnNvbGUubG9nKCdwdWxsIGV4cGlyZWQnKTtcblxuICBzdGF0ZSA9IFNUQVRFLmxpc3RlbmluZztcbiAgdXBkYXRlU3RhdGUoKTtcblxuICBzb2NrZXQuc2VuZCh7ZXZlbnQ6ICdtaXNzZWQnfSk7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3Rpb25FeHBpcmVkKCl7XG4gIGNvbnNvbGUubG9nKCdDb25uZWN0aW9uIGV4cGlyZWQhJyk7XG4gIHN0YXRlID0gU1RBVEUubGlzdGVuaW5nO1xuICB1cGRhdGVTdGF0ZSgpO1xuXG4gIGNsZWFyVGltZW91dChjb25uZWN0aW9uVGltZW91dCk7XG4gIHNvY2tldC5zZW5kKHtldmVudDogJ2V4cGlyZWQnfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0RXhwaXJ5VGltZW91dCgpe1xuICBjbGVhclRpbWVvdXQoY29ubmVjdGlvblRpbWVvdXQpO1xuICBjb25uZWN0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoY29ubmVjdGlvbkV4cGlyZWQsIDUwMCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0YXRlKCl7XG4gIHN3aXRjaChzdGF0ZSl7XG4gICAgY2FzZSBTVEFURS5saXN0ZW5pbmc6XG4gICAgICByZWRMZWQub2ZmKCk7XG4gICAgICBncmVlbkxlZC5vZmYoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU1RBVEUucHVsbDpcbiAgICAgIHJlZExlZC5vbigpO1xuICAgICAgZ3JlZW5MZWQub2ZmKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNUQVRFLnB1c2g6XG4gICAgICByZWRMZWQub2ZmKCk7XG4gICAgICBncmVlbkxlZC5vZmYoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU1RBVEUuY29ubmVjdGVkOlxuICAgICAgcmVkTGVkLm9mZigpO1xuICAgICAgZ3JlZW5MZWQub24oKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmluaXRpYWxpemUoKTtcblxuLy8gUHJpbnQgbWVzc2FnZSB3aGVuIGV4aXRpbmdcbnByb2Nlc3Mub24oJ1NJR0lOVCcsIGZ1bmN0aW9uKClcbntcblx0Y29uc29sZS5sb2coXCJFeGl0aW5nLi4uXCIpO1xuXHRwcm9jZXNzLmV4aXQoMCk7XG59KTtcbiJdfQ==